using System;
using JetBrains.ReSharper.Psi.Parsing;
using JetBrains.Text;
using JetBrains.Util;

%%

%unicode

%init{
  currentTokenType = null;
%init}

%namespace JetBrains.ReSharper.Plugins.Yaml.Psi.Parsing
%class YamlLexerGenerated
%implements IIncrementalLexer
%function _locateToken
%virtual
%public
%type TokenNodeType
%ignorecase

%eofval{
  currentTokenType = null; return currentTokenType;
%eofval}

%include Chars.lex


NEW_LINE_CHARS={CR}{LF}
NEW_LINE=({CR}?{LF}|{CR})
NOT_NEW_LINE=([^{NEW_LINE_CHARS}])

INPUT_CHARACTER={NOT_NEW_LINE}

WHITESPACE_CHARS={SP}{TAB}
WHITESPACE=[{WHITESPACE_CHARS}]+

SEQUENCE_ENTRY_CHAR={MINUS}
MAPPING_KEY_CHAR={QUESTION}
MAPPING_VALUE_CHAR={COLON}
COLLECTION_ENTRY_CHAR={COMMA}

SEQUENCE_START_CHAR={LBRACK}
SEQUENCE_END_CHAR={RBRACK}
MAPPING_START_CHAR={LBRACE}
MAPPING_END_CHAR={RBRACE}

COMMENT_CHAR={HASH}
ANCHOR_CHAR={AMP}
ALIAS_CHAR={ASTERISK}
TAG_CHAR={PLING}

LITERAL_CHAR={PIPE}
FOLDED_CHAR={GT}

DIRECTIVE_CHAR={PERCENT}

RESERVED_CHARS=[{AT}{BACKTICK}]

INDICATOR_CHARS=[{SEQUENCE_ENTRY_CHAR}{MAPPING_KEY_CHAR}{MAPPING_VALUE_CHAR}{COLLECTION_ENTRY_CHAR}{SEQUENCE_START_CHAR}{SEQUENCE_END_CHAR}{MAPPING_START_CHAR}{MAPPING_END_CHAR}{COMMENT_CHAR}{ANCHOR_CHAR}{ALIAS_CHAR}{TAG_CHAR}{LITERAL_CHAR}{FOLDED_CHAR}{PERCENT_CHAR}{AT}{BACKTICK}]

FLOW_INDICATOR_CHARS=[{COLLECTION_ENTRY_CHAR}{SEQUENCE_START_CHAR}{SEQUENCE_END_CHAR}{MAPPING_START_CHAR}{MAPPING_END_CHAR}]


%%

<YYINITIAL>  {NEW_LINE}     { return YamlTokenType.NEW_LINE; }

<YYINITIAL>  .              { return YamlTokenType.BAD_CHARACTER; }